// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ceph-radosgw:index:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public /*out*/ readonly _assimilated!: pulumi.Output<boolean>;
    public readonly capabilities!: pulumi.Output<outputs.Capabilities | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly email!: pulumi.Output<string | undefined>;
    public /*out*/ readonly keys!: pulumi.Output<outputs.KeyEntry[]>;
    public readonly maxBuckets!: pulumi.Output<number | undefined>;
    public readonly suspended!: pulumi.Output<boolean | undefined>;
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["maxBuckets"] = args ? args.maxBuckets : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["_assimilated"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
        } else {
            resourceInputs["_assimilated"] = undefined /*out*/;
            resourceInputs["capabilities"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["email"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["maxBuckets"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    capabilities?: pulumi.Input<inputs.CapabilitiesArgs>;
    displayName?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    maxBuckets?: pulumi.Input<number>;
    suspended?: pulumi.Input<boolean>;
    userId: pulumi.Input<string>;
}
