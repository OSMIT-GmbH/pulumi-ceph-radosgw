// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class SubUser extends pulumi.CustomResource {
    /**
     * Get an existing SubUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SubUser {
        return new SubUser(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ceph-radosgw:index:SubUser';

    /**
     * Returns true if the given object is an instance of SubUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubUser.__pulumiType;
    }

    public /*out*/ readonly _assimilated!: pulumi.Output<boolean>;
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    public readonly generateKey!: pulumi.Output<boolean | undefined>;
    public readonly keyType!: pulumi.Output<enums.KeyType | undefined>;
    public /*out*/ readonly keys!: pulumi.Output<outputs.KeyEntry[]>;
    public readonly permissions!: pulumi.Output<enums.SubUserPermission>;
    public readonly purgeKeys!: pulumi.Output<boolean | undefined>;
    public readonly secretKey!: pulumi.Output<string | undefined>;
    /**
     * Name of this subuser
     */
    public readonly subUserName!: pulumi.Output<string>;
    /**
     * User-ID of 'parent' user
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a SubUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubUserArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.subUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subUserName'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["generateKey"] = args ? args.generateKey : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["purgeKeys"] = args ? args.purgeKeys : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["subUserName"] = args ? args.subUserName : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["_assimilated"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
        } else {
            resourceInputs["_assimilated"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["generateKey"] = undefined /*out*/;
            resourceInputs["keyType"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["purgeKeys"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
            resourceInputs["subUserName"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SubUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SubUser resource.
 */
export interface SubUserArgs {
    generateKey?: pulumi.Input<boolean>;
    keyType?: pulumi.Input<enums.KeyType>;
    permissions: pulumi.Input<enums.SubUserPermission>;
    purgeKeys?: pulumi.Input<boolean>;
    secretKey?: pulumi.Input<string>;
    /**
     * Name of this subuser
     */
    subUserName: pulumi.Input<string>;
    /**
     * User-ID of 'parent' user
     */
    userId: pulumi.Input<string>;
}
