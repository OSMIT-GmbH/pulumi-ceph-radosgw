# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'Capabilities',
    'KeyEntry',
    'QuotaArgs',
]

@pulumi.output_type
class Capabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amzCache":
            suggest = "amz_cache"
        elif key == "oidcProvider":
            suggest = "oidc_provider"
        elif key == "userPolicy":
            suggest = "user_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Capabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Capabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Capabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amz_cache: Optional['CapabilityPermission'] = None,
                 bilog: Optional['CapabilityPermission'] = None,
                 buckets: Optional['CapabilityPermission'] = None,
                 datalog: Optional['CapabilityPermission'] = None,
                 info: Optional['CapabilityPermission'] = None,
                 mdlog: Optional['CapabilityPermission'] = None,
                 metadata: Optional['CapabilityPermission'] = None,
                 oidc_provider: Optional['CapabilityPermission'] = None,
                 ratelimit: Optional['CapabilityPermission'] = None,
                 roles: Optional['CapabilityPermission'] = None,
                 usage: Optional['CapabilityPermission'] = None,
                 user_policy: Optional['CapabilityPermission'] = None,
                 users: Optional['CapabilityPermission'] = None,
                 zone: Optional['CapabilityPermission'] = None):
        if amz_cache is not None:
            pulumi.set(__self__, "amz_cache", amz_cache)
        if bilog is not None:
            pulumi.set(__self__, "bilog", bilog)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if datalog is not None:
            pulumi.set(__self__, "datalog", datalog)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if mdlog is not None:
            pulumi.set(__self__, "mdlog", mdlog)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if oidc_provider is not None:
            pulumi.set(__self__, "oidc_provider", oidc_provider)
        if ratelimit is not None:
            pulumi.set(__self__, "ratelimit", ratelimit)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if user_policy is not None:
            pulumi.set(__self__, "user_policy", user_policy)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="amzCache")
    def amz_cache(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "amz_cache")

    @property
    @pulumi.getter
    def bilog(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "bilog")

    @property
    @pulumi.getter
    def buckets(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter
    def datalog(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "datalog")

    @property
    @pulumi.getter
    def info(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def mdlog(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "mdlog")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="oidcProvider")
    def oidc_provider(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "oidc_provider")

    @property
    @pulumi.getter
    def ratelimit(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "ratelimit")

    @property
    @pulumi.getter
    def roles(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def usage(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="userPolicy")
    def user_policy(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "user_policy")

    @property
    @pulumi.getter
    def users(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def zone(self) -> Optional['CapabilityPermission']:
        return pulumi.get(self, "zone")


@pulumi.output_type
class KeyEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyType":
            suggest = "key_type"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "accessKey":
            suggest = "access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_type: str,
                 secret_key: str,
                 access_key: Optional[str] = None):
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")


@pulumi.output_type
class QuotaArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxObjects":
            suggest = "max_objects"
        elif key == "maxObjectsHum":
            suggest = "max_objects_hum"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "maxSizeHum":
            suggest = "max_size_hum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuotaArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuotaArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuotaArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_objects: Optional[int] = None,
                 max_objects_hum: Optional[str] = None,
                 max_size: Optional[int] = None,
                 max_size_hum: Optional[str] = None):
        """
        :param bool enabled: Enable or disable quota enforcement quota
        :param int max_objects: Maximum object count - numeric value (alternate to MaxObjectsHum)
        :param str max_objects_hum: Maximum object count - human readable format (i.e. 10k) (alternate to MaxObjects)
        :param int max_size: Maximum size - numeric value (alternate to MaxSizeHum)
        :param str max_size_hum: Maximum size - human readable format (alternate to MaxSize)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_objects is not None:
            pulumi.set(__self__, "max_objects", max_objects)
        if max_objects_hum is not None:
            pulumi.set(__self__, "max_objects_hum", max_objects_hum)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_hum is not None:
            pulumi.set(__self__, "max_size_hum", max_size_hum)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable or disable quota enforcement quota
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxObjects")
    def max_objects(self) -> Optional[int]:
        """
        Maximum object count - numeric value (alternate to MaxObjectsHum)
        """
        return pulumi.get(self, "max_objects")

    @property
    @pulumi.getter(name="maxObjectsHum")
    def max_objects_hum(self) -> Optional[str]:
        """
        Maximum object count - human readable format (i.e. 10k) (alternate to MaxObjects)
        """
        return pulumi.get(self, "max_objects_hum")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        Maximum size - numeric value (alternate to MaxSizeHum)
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="maxSizeHum")
    def max_size_hum(self) -> Optional[str]:
        """
        Maximum size - human readable format (alternate to MaxSize)
        """
        return pulumi.get(self, "max_size_hum")


