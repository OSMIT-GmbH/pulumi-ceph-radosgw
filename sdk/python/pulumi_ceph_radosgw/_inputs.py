# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'CapabilitiesArgs',
    'QuotaArgsArgs',
]

@pulumi.input_type
class CapabilitiesArgs:
    def __init__(__self__, *,
                 amz_cache: Optional[pulumi.Input['CapabilityPermission']] = None,
                 bilog: Optional[pulumi.Input['CapabilityPermission']] = None,
                 buckets: Optional[pulumi.Input['CapabilityPermission']] = None,
                 datalog: Optional[pulumi.Input['CapabilityPermission']] = None,
                 info: Optional[pulumi.Input['CapabilityPermission']] = None,
                 mdlog: Optional[pulumi.Input['CapabilityPermission']] = None,
                 metadata: Optional[pulumi.Input['CapabilityPermission']] = None,
                 oidc_provider: Optional[pulumi.Input['CapabilityPermission']] = None,
                 ratelimit: Optional[pulumi.Input['CapabilityPermission']] = None,
                 roles: Optional[pulumi.Input['CapabilityPermission']] = None,
                 usage: Optional[pulumi.Input['CapabilityPermission']] = None,
                 user_policy: Optional[pulumi.Input['CapabilityPermission']] = None,
                 users: Optional[pulumi.Input['CapabilityPermission']] = None,
                 zone: Optional[pulumi.Input['CapabilityPermission']] = None):
        if amz_cache is not None:
            pulumi.set(__self__, "amz_cache", amz_cache)
        if bilog is not None:
            pulumi.set(__self__, "bilog", bilog)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if datalog is not None:
            pulumi.set(__self__, "datalog", datalog)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if mdlog is not None:
            pulumi.set(__self__, "mdlog", mdlog)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if oidc_provider is not None:
            pulumi.set(__self__, "oidc_provider", oidc_provider)
        if ratelimit is not None:
            pulumi.set(__self__, "ratelimit", ratelimit)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if user_policy is not None:
            pulumi.set(__self__, "user_policy", user_policy)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="amzCache")
    def amz_cache(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "amz_cache")

    @amz_cache.setter
    def amz_cache(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "amz_cache", value)

    @property
    @pulumi.getter
    def bilog(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "bilog")

    @bilog.setter
    def bilog(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "bilog", value)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter
    def datalog(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "datalog")

    @datalog.setter
    def datalog(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "datalog", value)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def mdlog(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "mdlog")

    @mdlog.setter
    def mdlog(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "mdlog", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="oidcProvider")
    def oidc_provider(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "oidc_provider")

    @oidc_provider.setter
    def oidc_provider(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "oidc_provider", value)

    @property
    @pulumi.getter
    def ratelimit(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "ratelimit")

    @ratelimit.setter
    def ratelimit(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "ratelimit", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="userPolicy")
    def user_policy(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "user_policy")

    @user_policy.setter
    def user_policy(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "user_policy", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input['CapabilityPermission']]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input['CapabilityPermission']]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class QuotaArgsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_objects: Optional[pulumi.Input[int]] = None,
                 max_objects_hum: Optional[pulumi.Input[str]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 max_size_hum: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable or disable quota enforcement quota
        :param pulumi.Input[int] max_objects: Maximum object count - numeric value (alternate to MaxObjectsHum)
        :param pulumi.Input[str] max_objects_hum: Maximum object count - human readable format (i.e. 10k) (alternate to MaxObjects)
        :param pulumi.Input[int] max_size: Maximum size - numeric value (alternate to MaxSizeHum)
        :param pulumi.Input[str] max_size_hum: Maximum size - human readable format (alternate to MaxSize)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_objects is not None:
            pulumi.set(__self__, "max_objects", max_objects)
        if max_objects_hum is not None:
            pulumi.set(__self__, "max_objects_hum", max_objects_hum)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_hum is not None:
            pulumi.set(__self__, "max_size_hum", max_size_hum)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable quota enforcement quota
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxObjects")
    def max_objects(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum object count - numeric value (alternate to MaxObjectsHum)
        """
        return pulumi.get(self, "max_objects")

    @max_objects.setter
    def max_objects(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_objects", value)

    @property
    @pulumi.getter(name="maxObjectsHum")
    def max_objects_hum(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum object count - human readable format (i.e. 10k) (alternate to MaxObjects)
        """
        return pulumi.get(self, "max_objects_hum")

    @max_objects_hum.setter
    def max_objects_hum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_objects_hum", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size - numeric value (alternate to MaxSizeHum)
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeHum")
    def max_size_hum(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size - human readable format (alternate to MaxSize)
        """
        return pulumi.get(self, "max_size_hum")

    @max_size_hum.setter
    def max_size_hum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_hum", value)


