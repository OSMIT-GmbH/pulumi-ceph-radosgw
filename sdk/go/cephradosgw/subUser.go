// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cephradosgw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"int"
)

type SubUser struct {
	pulumi.CustomResourceState

	_assimilated pulumi.BoolOutput       `pulumi:"_assimilated"`
	Fullname     pulumi.StringOutput     `pulumi:"fullname"`
	GenerateKey  pulumi.BoolPtrOutput    `pulumi:"generateKey"`
	KeyType      KeyTypePtrOutput        `pulumi:"keyType"`
	Keys         KeyEntryArrayOutput     `pulumi:"keys"`
	Permissions  SubUserPermissionOutput `pulumi:"permissions"`
	PurgeKeys    pulumi.BoolPtrOutput    `pulumi:"purgeKeys"`
	SecretKey    pulumi.StringPtrOutput  `pulumi:"secretKey"`
	// Name of this subuser
	SubUserName pulumi.StringOutput `pulumi:"subUserName"`
	// User-ID of 'parent' user
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewSubUser registers a new resource with the given unique name, arguments, and options.
func NewSubUser(ctx *pulumi.Context,
	name string, args *SubUserArgs, opts ...pulumi.ResourceOption) (*SubUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.SubUserName == nil {
		return nil, errors.New("invalid value for required argument 'SubUserName'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = int.PkgResourceDefaultOpts(opts)
	var resource SubUser
	err := ctx.RegisterResource("ceph-radosgw:index:SubUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubUser gets an existing SubUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubUserState, opts ...pulumi.ResourceOption) (*SubUser, error) {
	var resource SubUser
	err := ctx.ReadResource("ceph-radosgw:index:SubUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubUser resources.
type subUserState struct {
}

type SubUserState struct {
}

func (SubUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*subUserState)(nil)).Elem()
}

type subUserArgs struct {
	GenerateKey *bool             `pulumi:"generateKey"`
	KeyType     *KeyType          `pulumi:"keyType"`
	Permissions SubUserPermission `pulumi:"permissions"`
	PurgeKeys   *bool             `pulumi:"purgeKeys"`
	SecretKey   *string           `pulumi:"secretKey"`
	// Name of this subuser
	SubUserName string `pulumi:"subUserName"`
	// User-ID of 'parent' user
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a SubUser resource.
type SubUserArgs struct {
	GenerateKey pulumi.BoolPtrInput
	KeyType     KeyTypePtrInput
	Permissions SubUserPermissionInput
	PurgeKeys   pulumi.BoolPtrInput
	SecretKey   pulumi.StringPtrInput
	// Name of this subuser
	SubUserName pulumi.StringInput
	// User-ID of 'parent' user
	UserId pulumi.StringInput
}

func (SubUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subUserArgs)(nil)).Elem()
}

type SubUserInput interface {
	pulumi.Input

	ToSubUserOutput() SubUserOutput
	ToSubUserOutputWithContext(ctx context.Context) SubUserOutput
}

func (*SubUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SubUser)(nil)).Elem()
}

func (i *SubUser) ToSubUserOutput() SubUserOutput {
	return i.ToSubUserOutputWithContext(context.Background())
}

func (i *SubUser) ToSubUserOutputWithContext(ctx context.Context) SubUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubUserOutput)
}

type SubUserOutput struct{ *pulumi.OutputState }

func (SubUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubUser)(nil)).Elem()
}

func (o SubUserOutput) ToSubUserOutput() SubUserOutput {
	return o
}

func (o SubUserOutput) ToSubUserOutputWithContext(ctx context.Context) SubUserOutput {
	return o
}

func (o SubUserOutput) _assimilated() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubUser) pulumi.BoolOutput { return v._assimilated }).(pulumi.BoolOutput)
}

func (o SubUserOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *SubUser) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

func (o SubUserOutput) GenerateKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubUser) pulumi.BoolPtrOutput { return v.GenerateKey }).(pulumi.BoolPtrOutput)
}

func (o SubUserOutput) KeyType() KeyTypePtrOutput {
	return o.ApplyT(func(v *SubUser) KeyTypePtrOutput { return v.KeyType }).(KeyTypePtrOutput)
}

func (o SubUserOutput) Keys() KeyEntryArrayOutput {
	return o.ApplyT(func(v *SubUser) KeyEntryArrayOutput { return v.Keys }).(KeyEntryArrayOutput)
}

func (o SubUserOutput) Permissions() SubUserPermissionOutput {
	return o.ApplyT(func(v *SubUser) SubUserPermissionOutput { return v.Permissions }).(SubUserPermissionOutput)
}

func (o SubUserOutput) PurgeKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubUser) pulumi.BoolPtrOutput { return v.PurgeKeys }).(pulumi.BoolPtrOutput)
}

func (o SubUserOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubUser) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Name of this subuser
func (o SubUserOutput) SubUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubUser) pulumi.StringOutput { return v.SubUserName }).(pulumi.StringOutput)
}

// User-ID of 'parent' user
func (o SubUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubUserInput)(nil)).Elem(), &SubUser{})
	pulumi.RegisterOutputType(SubUserOutput{})
}
