// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cephradosgw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"int"
)

type Bucket struct {
	pulumi.CustomResourceState

	// Bucket was 'assimilated' - managing an existing bucket.
	_assimilated pulumi.BoolOutput   `pulumi:"_assimilated"`
	_location    pulumi.StringOutput `pulumi:"_location"`
	// Bucket name
	Name pulumi.StringOutput `pulumi:"name"`
	// Bucket object locking enabled
	ObjectLocking pulumi.BoolPtrOutput `pulumi:"objectLocking"`
	// Purge bucket on delete.
	PurgeOnDelete pulumi.BoolPtrOutput `pulumi:"purgeOnDelete"`
	// Bucket quota configuration
	Quota QuotaArgsPtrOutput `pulumi:"quota"`
	// The unique bucket id.
	Ubid       pulumi.StringOutput  `pulumi:"ubid"`
	Versioning pulumi.BoolPtrOutput `pulumi:"versioning"`
}

// NewBucket registers a new resource with the given unique name, arguments, and options.
func NewBucket(ctx *pulumi.Context,
	name string, args *BucketArgs, opts ...pulumi.ResourceOption) (*Bucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = int.PkgResourceDefaultOpts(opts)
	var resource Bucket
	err := ctx.RegisterResource("ceph-radosgw:index:Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucket gets an existing Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketState, opts ...pulumi.ResourceOption) (*Bucket, error) {
	var resource Bucket
	err := ctx.ReadResource("ceph-radosgw:index:Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bucket resources.
type bucketState struct {
}

type BucketState struct {
}

func (BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketState)(nil)).Elem()
}

type bucketArgs struct {
	// Bucket name
	Name string `pulumi:"name"`
	// Bucket object locking enabled
	ObjectLocking *bool `pulumi:"objectLocking"`
	// Purge bucket on delete
	PurgeOnDelete *bool `pulumi:"purgeOnDelete"`
	// Bucket quota configuration
	Quota      *QuotaArgs `pulumi:"quota"`
	Versioning *bool      `pulumi:"versioning"`
}

// The set of arguments for constructing a Bucket resource.
type BucketArgs struct {
	// Bucket name
	Name pulumi.StringInput
	// Bucket object locking enabled
	ObjectLocking pulumi.BoolPtrInput
	// Purge bucket on delete
	PurgeOnDelete pulumi.BoolPtrInput
	// Bucket quota configuration
	Quota      QuotaArgsPtrInput
	Versioning pulumi.BoolPtrInput
}

func (BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketArgs)(nil)).Elem()
}

type BucketInput interface {
	pulumi.Input

	ToBucketOutput() BucketOutput
	ToBucketOutputWithContext(ctx context.Context) BucketOutput
}

func (*Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (i *Bucket) ToBucketOutput() BucketOutput {
	return i.ToBucketOutputWithContext(context.Background())
}

func (i *Bucket) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOutput)
}

type BucketOutput struct{ *pulumi.OutputState }

func (BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (o BucketOutput) ToBucketOutput() BucketOutput {
	return o
}

func (o BucketOutput) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return o
}

// Bucket was 'assimilated' - managing an existing bucket.
func (o BucketOutput) _assimilated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolOutput { return v._assimilated }).(pulumi.BoolOutput)
}

func (o BucketOutput) _location() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v._location }).(pulumi.StringOutput)
}

// Bucket name
func (o BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Bucket object locking enabled
func (o BucketOutput) ObjectLocking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolPtrOutput { return v.ObjectLocking }).(pulumi.BoolPtrOutput)
}

// Purge bucket on delete.
func (o BucketOutput) PurgeOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolPtrOutput { return v.PurgeOnDelete }).(pulumi.BoolPtrOutput)
}

// Bucket quota configuration
func (o BucketOutput) Quota() QuotaArgsPtrOutput {
	return o.ApplyT(func(v *Bucket) QuotaArgsPtrOutput { return v.Quota }).(QuotaArgsPtrOutput)
}

// The unique bucket id.
func (o BucketOutput) Ubid() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Ubid }).(pulumi.StringOutput)
}

func (o BucketOutput) Versioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolPtrOutput { return v.Versioning }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketInput)(nil)).Elem(), &Bucket{})
	pulumi.RegisterOutputType(BucketOutput{})
}
