// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cephradosgw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"int"
)

type Key struct {
	pulumi.CustomResourceState

	_assimilated pulumi.BoolOutput `pulumi:"_assimilated"`
	// The access key
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// key type - either 's3' or 'swift'
	KeyType pulumi.StringPtrOutput `pulumi:"keyType"`
	// The secret key
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
	// Name of sub-user (optional)
	SubUserName pulumi.StringPtrOutput `pulumi:"subUserName"`
	// User-ID of 'parent' user
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = int.PkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("ceph-radosgw:index:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("ceph-radosgw:index:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
}

type KeyState struct {
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// The access key
	AccessKey *string `pulumi:"accessKey"`
	// key type - either 's3' or 'swift'
	KeyType *string `pulumi:"keyType"`
	// The secret key
	SecretKey *string `pulumi:"secretKey"`
	// Name of sub-user (optional)
	SubUserName *string `pulumi:"subUserName"`
	// User-ID of 'parent' user
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// The access key
	AccessKey pulumi.StringPtrInput
	// key type - either 's3' or 'swift'
	KeyType pulumi.StringPtrInput
	// The secret key
	SecretKey pulumi.StringPtrInput
	// Name of sub-user (optional)
	SubUserName pulumi.StringPtrInput
	// User-ID of 'parent' user
	UserId pulumi.StringInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

func (o KeyOutput) _assimilated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v._assimilated }).(pulumi.BoolOutput)
}

// The access key
func (o KeyOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// key type - either 's3' or 'swift'
func (o KeyOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.KeyType }).(pulumi.StringPtrOutput)
}

// The secret key
func (o KeyOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Name of sub-user (optional)
func (o KeyOutput) SubUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.SubUserName }).(pulumi.StringPtrOutput)
}

// User-ID of 'parent' user
func (o KeyOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterOutputType(KeyOutput{})
}
